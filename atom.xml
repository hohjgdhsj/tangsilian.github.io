<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tesi1a]]></title>
  <link href="https://tangsilian.github.io/atom.xml" rel="self"/>
  <link href="https://tangsilian.github.io/"/>
  <updated>2018-01-23T23:11:21+08:00</updated>
  <id>https://tangsilian.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[写出来的效果]]></title>
    <link href="https://tangsilian.github.io/15127442739910.html"/>
    <updated>2017-12-08T22:44:33+08:00</updated>
    <id>https://tangsilian.github.io/15127442739910.html</id>
    <content type="html"><![CDATA[
<ol>
<li>清晰地提出问题，需要解决的技术问题是什么，技术挑战有哪些，背景知识有哪些；</li>
<li>总结直到当前的技术进展，按照统一的思路将各种已有的解决方案和技术分类，让整个话题的前后发展变得清晰；</li>
<li>评论各类方案的优缺点，尤其是在哪些情况下会导致问题；</li>
<li>提出这个方向目前主要存在的、还没解决或者没有彻底解决的问题，给后续研究提供线索。</li>
</ol>

<h1 id="toc_0">janus(CVE-2017-13156)漏洞分析</h1>

<p>17.7.31 DexGurad 向谷歌报告此问题<br/>
17.11  Google向合作伙伴发布补丁<br/>
17.12.4 Android更新安全公告并分配CVE编号(CVE-2017-13156)</p>

<h1 id="toc_1">漏洞产生原因：</h1>

<p>在4.4.3上的机器上安装失败<br/>
adb安装显示     Failure [INSTALL_FAILED_INVALID_APK]<br/>
apk包安装显示   There was a problem parsing the package</p>

<p>影响范围使用ART虚拟机的5.0～8.0</p>

<h1 id="toc_2">安装机制：ART和安装过程</h1>

<p><img src="media/15127442739910/15129192361513.jpg" alt=""/><br/>
ART引入了AOT（Ahead of Time）这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。<br/>
由于ART采用和dalvik在执行上的不同</p>

<h1 id="toc_3">应用安装涉及到的目录</h1>

<p>/system/app ：系统自带的应用程序，获得adb root权限才能删除<br/>
/data/app ：用户程序安装的目录。安装时把apk文件复制到此目录<br/>
/data/data ：存放应用程序的数据<br/>
/data/dalvik-cache：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,当然，ART–Android Runtime的可执行文件格式为oat，启用ART时，系统会执行dex文件转换至oat文件)<br/>
/data/system ：该目录下的packages.xml文件，类似于Windows的注册表，这个文件是在解析apk时由writeLP()创建的，里面记录了系统的permissions，以及每个apk的name,codePath,flags,ts,version,uesrid等信息，这些信息主要通apk的AndroidManifest.xml解析获取，解析完apk后将更新信息写入这个文件并保存到flash，下次开机直接从里面读取相关信息添加到内存相关列表中。当有apk升级，安装或删除时会更新这个文件。<br/>
/data/system/packages.xml中内容详解(这里列举的标签内容不一定完整，只是列举核心内容，packages.xml的完整定义详见官方文档)：</p>

<h1 id="toc_4">app的安装</h1>

<p>四种安装方式：<br/>
系统应用安装：开机时加载系统的APK和应用，没有安装界面；<br/>
网络下载应用安装：通过各种market应用完成，没有安装界面；<br/>
ADB工具安装：即通过Android的SDK开发tools里面的adb.exe程序安装，没有安装界面；<br/>
第三方应用安装：通过SD卡里的APK文件安装(比如双击APK文件触发)，有安装界面，系统默认已经安装了一个安装卸载应用的程序，即由packageinstaller.apk应用处理安装及卸载过程的界面。</p>

<p>安装过程：<br/>
1.拷贝到/data/app目录下  com.example.app/base.apk</p>

<p>2.解压apk，拷贝文件。创建应用的数据目录<br/>
为了加快app的启动速度，apk在安装的时候，会首先将app的可执行文件（dex）拷贝到 /data/dalvik-cache 目录，缓存起来。<br/>
然后，在/data/data/目录下创建应用程序的数据目录（以应用的包名命名），存放应用的相关数据，如数据库、xml文件、cache、二进制的so动态库等等。</p>

<p>3.解析AndroidManifinest.xml</p>

<p>4.向Launcher应用申请添加创建快捷方式<br/>
 AndroidMainfest.xml在主启动项里添加Launcher</p>

<h1 id="toc_5">漏洞利用</h1>

<h2 id="toc_6">1.pass AV的过程：</h2>

<p>为什么杀毒引擎检测不出，杀软本地扫描的政策</p>

<p>如何检测：<br/>
1.防止上架<br/>
dex在应该上架不了</p>

<p>2.防止作为payload来释放<br/>
1.卫士静态扫描dex？？</p>

<p>2.云查</p>

<h2 id="toc_7">伪造升级，继承原有权限</h2>

<p>一般app应用的更新如下：<br/>
1.通过第三方市场更新<br/>
相信大家对于如何安装一个Apk都比较熟悉吧，原理也是比较简单的。</p>

<p>（1）通过downloadId获取下载的Uri。</p>

<p>（2）将Uri设置到Itent的setDataAndType作为启动条件。</p>

<p>（3）调用startActivity启动对应Intent即可。<br/>
2.打开应用，提示更新</p>

<p>/data/system ：该目录下的packages.xml文件，类似于Windows的注册表，这个文件是在解析apk时由writeLP()创建的，里面记录了系统的permissions，以及每个apk的name,codePath,flags,ts,version,uesrid等信息，这些信息主要通apk的AndroidManifest.xml解析获取，解析完apk后将更新信息写入这个文件并保存到flash，下次开机直接从里面读取相关信息添加到内存相关列表中。当有apk升级，安装或删除时会更新这个文件。<br/>
/data/system/packages.xml中内容详解(这里列举的标签内容不一定完整，只是列举核心内容，packages.xml的完整定义详见官方文档)：</p>

]]></content>
  </entry>
  
</feed>
